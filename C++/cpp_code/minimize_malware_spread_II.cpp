/*
928. Minimize Malware Spread II

(This problem is the same as Minimize Malware Spread, with the differences bolded.)
In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.
Whenever two nodes are directly connected and at least one of those two nodes is infected by malware,
both nodes will be infected by malware.
This spread of malware will continue until no more nodes can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in the entire network,
after the spread of malware stops.

We will remove one node from the initial list,
completely removing it and any connections from this node to any other node.
Return the node that if removed, would minimize M(initial).
If multiple nodes could be removed to minimize M(initial),
return such a node with the smallest index.

Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:
Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
Output: 1

Example 3:
Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
Output: 1

Note:
1 < graph.length = graph[0].length <= 300
0 <= graph[i][j] == graph[j][i] <= 1
graph[i][i] = 1
1 <= initial.length < graph.length
0 <= initial[i] < graph.length
*/
#include <iostream>
#include <string>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <cmath>
#include <queue>
#include <stack>
#include <stdio.h>
#include <map>
#include <numeric>
using namespace std;

class Solution { // union-find
private:
    int find(vector<int>& parent, int node) {
        if (node != parent[node]) {
            parent[node] = find(parent, parent[node]);
        }
        return parent[node];
    }
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<int> parent(n, 0);
        iota(parent.begin(), parent.end(), 0);
        vector<int> count(n, 1);
        unordered_set<int> source(initial.begin(), initial.end());

        // construct the components without initial malwares
        for (int i = 0; i < n; ++i) if (source.find(i) == source.end()) {
            for (int j = 0; j < n; ++j) if (source.find(j) == source.end()) {
                if (graph[i][j] == 1) {
                    int pi = find(parent, i);
                    int pj = find(parent, j);
                    if (pi != pj) {
                        parent[pi] = pj;
                        count[pj] += count[pi];
                    }
                }
            }
        }

        unordered_map<int, unordered_set<int>> affectedBy; // find each components will be affected by which source
        for (int s : source) {
            for (int i = 0; i < n; ++i) if (source.find(i) == source.end() and graph[s][i] == 1) {
                affectedBy[find(parent, i)].insert(s);
            }
            affectedBy[s].insert(s); // the source itself will only be affected by itself only
        }

        vector<int> area(n, 0); // the number of nodes will only infected by a single source
        for (int i = 0; i < n; ++i) {
            if (parent[i] == i and affectedBy[i].size() == 1) {
                for (int s : affectedBy[i]) {
                    area[s] += count[i];
                }
            }
        }

        int result = -1;
        int maxCount = INT_MIN;
        for (int s : source) {
            if (area[s] == 0) {
                continue;
            }
            if (area[s] > maxCount) {
                result = s;
                maxCount = area[s];
                continue;
            }
            if (area[s] == maxCount and s < result) {
                result = s;
            }
        }
        return result;
    }
};

class Solution1 { // BFS
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int nodes = graph.size();
        unordered_set<int> initialInfections(initial.begin(), initial.end());
        unordered_map<int, unordered_set<int>> infectedBy;
        queue<pair<int, int>> bfs;
        for (int i : initial) {
            infectedBy[i].insert(i);
            bfs.push({i, i});
        }

        while (!bfs.empty()) {
            int curNode = bfs.front().first;
            int source = bfs.front().second;
            bfs.pop();

            for (int nextNode = 0; nextNode < graph[curNode].size(); nextNode++) {
                /*
                * Note: if current node is a initial infected node, then we cannot continue from here,
                * cause it means infections comming through here will identified as infected by this initial node.
               */
                if (nextNode != curNode and graph[curNode][nextNode] == 1 and infectedBy[nextNode].find(source) == infectedBy[nextNode].end() and initialInfections.find(nextNode) == initialInfections.end()) {
                    infectedBy[nextNode].insert(source);
                    bfs.push({nextNode, source});
                }
            }
        }

        unordered_map<int, int> onlySource;
        for (auto& infection : infectedBy) {
            int node = infection.first;
            unordered_set<int> sources = infection.second;
            if (sources.size() == 1) {
                for (int source : sources) {
                    onlySource[source] += 1;
                }
            }
        }

        int count = INT_MIN;
        int result = -1;
        for (auto& os : onlySource) {
            if (count < os.second) {
                count = os.second;
                result = os.first;
            }
            else if (count == os.second) {
                result = min(result, os.first);
            }
        }
        return result;
    }
};
